아래는 CRI-O v1.31(Kubernetes 1.31) 기준으로, pkgs.k8s.io에서 제공하는 공식 가이드를 바탕으로 Ubuntu/Deb 계열에서 설치하는 과정을 정리한 예시입니다. (RPM 계열도 유사하지만, 여기서는 apt-get 방식 위주로 설명)

전제
	•	우분투(또는 데비안) 기반 환경이며, root 권한(또는 sudo) 사용 가능
	•	Kubernetes 버전(KUBERNETES_VERSION)과 CRI-O 버전(CRIO_VERSION)을 동일하게 맞춰 쓰는 것을 권장
	•	이 예시에선 모두 v1.31로 지정

	현재(2023~2024 시점) v1.31은 표준 릴리스로 존재하며, v1.32 이상은 아직 (프리릴리스로도) 안 나왔거나 지원이 미흡할 수 있습니다.

1. 환경 변수 설정

export KUBERNETES_VERSION=v1.31
export CRIO_VERSION=v1.31

	•	v1.28, v1.29, v1.30 등 다른 버전이 필요하다면 값만 바꿔주세요.
	•	CRI-O는 v1.28부터 pkgs.k8s.io 인프라에 공식 편입되었으므로, 1.28 이상 버전부터 이 방식을 사용할 수 있습니다.

2. Dependencies 설치

우분투/데비안 계열에서 apt-get으로 레포지토리를 추가하기 위한 패키지 설치:

sudo apt-get update
sudo apt-get install -y software-properties-common curl

(이미 curl 등이 있다면 스킵해도 무방)

3. Kubernetes APT 레포 추가
	1.	키(keyring) 파일 받기

curl -fsSL \
  https://pkgs.k8s.io/core:/stable:/${KUBERNETES_VERSION}/deb/Release.key \
  | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

	•	pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key 형태의 URL에서 키를 받아서, GPG Keyring(kubernetes-apt-keyring.gpg)으로 저장

	2.	소스 리스트(sources.list.d) 등록

echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] \
  https://pkgs.k8s.io/core:/stable:/${KUBERNETES_VERSION}/deb/ /" \
  | sudo tee /etc/apt/sources.list.d/kubernetes.list

4. CRI-O APT 레포 추가
	1.	키(keyring) 파일 받기

curl -fsSL \
  https://pkgs.k8s.io/addons:/cri-o:/stable:/${CRIO_VERSION}/deb/Release.key \
  | sudo gpg --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg

	2.	소스 리스트(sources.list.d) 등록

echo "deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] \
  https://pkgs.k8s.io/addons:/cri-o:/stable:/${CRIO_VERSION}/deb/ /" \
  | sudo tee /etc/apt/sources.list.d/cri-o.list

5. 패키지 설치

sudo apt-get update
sudo apt-get install -y cri-o kubelet kubeadm kubectl

	•	cri-o: CRI-O 런타임 본체
	•	kubelet, kubeadm, kubectl: 쿠버네티스 핵심 CLI/노드 구성 요소
	•	설치 후 확인:

crio --version
kubeadm version

6. CRI-O 서비스 시작

sudo systemctl enable crio
sudo systemctl start crio

	•	정상 동작 확인:

systemctl status crio

7. (선택) 커널/네트워크 모듈 설정

쿠버네티스 및 CRI-O를 사용하기 전에, swap 오프와 커널 모듈을 준비하는 것이 일반적입니다.

# swap 해제
sudo swapoff -a

# br_netfilter 모듈 로드
sudo modprobe br_netfilter

echo br_netfilter | sudo tee /etc/modules-load.d/br_netfilter.conf

# IP 포워딩 활성화
sudo sysctl -w net.ipv4.ip_forward=1

	•	실제로는 /etc/fstab에서 스왑 파티션 주석 처리, /etc/sysctl.d 쪽에서 netfilter 설정 영구화 등이 필요할 수도 있습니다.

cat <<EOF | sudo tee /etc/sysctl.d/99-bridge.conf
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

sudo sysctl --system

echo "net.ipv4.ip_forward=1" | sudo tee -a /etc/sysctl.d/99-bridge.conf
sudo sysctl --system

lsmod | grep br_netfilter
sysctl net.bridge.bridge-nf-call-iptables
sysctl net.ipv4.ip_forward

8. Kubernetes 클러스터 부트스트랩

8.1 Control Plane

sudo kubeadm init \
  --pod-network-cidr=10.244.0.0/16 \
  --cri-socket=unix:///var/run/crio/crio.sock

	•	pod-network-cidr는 예시(Flannel 용)
	•	성공 시 kubeadm join … 명령어가 출력되므로 복사해둡니다.

그 후:

mkdir -p $HOME/.kube
sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
kubectl get nodes

8.2 CNI 설치

Flannel, Calico 등 원하는 네트워크 플러그인 적용 예시:

kubectl apply -f \
  https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml

8.3 Worker Node Join
	•	워커 노드에서도 CRI-O, kubeadm, kubelet, kubectl이 설치된 상태이어야 함(동일 레포지토리 추가 + apt-get install 절차)
	•	Control Plane init 시 출력된 kubeadm join … 명령어를 worker에서 실행

예:

sudo kubeadm join <control-plane-ip>:6443 \
  --token <token> \
  --discovery-token-ca-cert-hash sha256:<hash> \
  --cri-socket=unix:///var/run/crio/crio.sock

참고 & 마무리
	1.	kubeadm + CRI-O + pkgs.k8s.io 구조는 공식적으로 (1.28 이후) 지원되는 최신 방식입니다.
	2.	v1.31 버전대까지 안정 버전(stable)이 나오므로, 호환되는 Kubernetes 버전과 CRI-O 버전을 맞추면 됩니다.
	3.	만약 우분투가 아직 공식적으로 지원되지 않는 버전(예: 24.04 개발판)이라면, pkgs.k8s.io 측 리포지토리가 완비되지 않아 404가 날 수 있습니다. 이 경우엔 보다 안정적인 OS(22.04 등)로 시도하거나, CRI-O 프로젝트에서 제공하는 다른 OBS 빌드를 직접 찾는 방법이 있습니다.

결론적으로, 위 과정을 따라 하면 CRI-O v1.31 + Kubernetes 1.31 환경을 pkgs.k8s.io에서 제공하는 공식 Deb 패키지로 설치해 쿠버네티스 클러스터를 구성할 수 있습니다.